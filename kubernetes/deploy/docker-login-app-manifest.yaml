apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/name: docker-login-page
  name: docker-login-page
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: docker-login-page
  labels:
    app.kubernetes.io/name: docker-login-page
    tier: frontend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: docker-login-page
      tier: frontend
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: docker-login-page
        tier: frontend
    spec:
      containers:
      - name: webapp1
        image: dockerloginpage/frontend:v1.0.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: mysql_root_pass
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: mysql_database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: mysql_user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: mysql_password
        - name: MYSQL_ROOT_HOST
          value: mysql-svc
        imagePullPolicy: Always
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: docker-login-page
  namespace: docker-login-page
  labels:
    app.kubernetes.io/name: docker-login-page
    tier: frontend
spec:
  selector:
    app.kubernetes.io/name: docker-login-page
    tier: frontend
  ports:
  - protocol: "TCP"
    port: 80
    targetPort: 80
  type: NodePort
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: backend
  namespace: docker-login-page
  labels:
    app.kubernetes.io/name: docker-login-page
    tier: backend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: docker-login-page
      tier: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: docker-login-page
        tier: backend
    spec:
      containers:
      - image: dockerloginpage/backend:v1.0.0
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: mysql_root_pass
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: mysql_database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: mysql_user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: mysql_password
        args: ["--default-authentication-plugin=mysql_native_password"]
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: db-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-svc
  namespace: docker-login-page
  labels:
    app.kubernetes.io/name: docker-login-page
    tier: backend
spec:
  selector:
    app.kubernetes.io/name: docker-login-page
    tier: backend
  ports:
  - protocol: "TCP"
    port: 3306
    targetPort: 3306
  clusterIP: None
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: db-pvc
  namespace: docker-login-page
  labels:
    app.kubernetes.io/name: docker-login-page
    tier: backend
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: docker-login-page
  labels:
    app.kubernetes.io/name: docker-login-page
    tier: backend
type: Opaque
data:
  mysql_root_pass: cGFzcw==
  mysql_database: ZGF0YWJhc2U=
  mysql_user: dXNlcm5hbWU=
  mysql_password: cGFzc3dvcmQ=
---